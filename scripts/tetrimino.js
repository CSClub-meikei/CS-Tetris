// Generated by CoffeeScript 1.10.0
var Tetrimino, TetriminoRed, idNumber,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

idNumber = 0;

Tetrimino = (function() {
  function Tetrimino(locate, type) {
    this.type = type;
    this.point = {
      top: 0,
      left: 0
    };
    this.blocks = [new TetriminoBlockElement("block" + (idNumber++), locate[0], locate[1], type), new TetriminoBlockElement("block" + (idNumber++), locate[2], locate[3], type), new TetriminoBlockElement("block" + (idNumber++), locate[4], locate[5], type), new TetriminoBlockElement("block" + (idNumber++), locate[6], locate[7], type)];
    this.deg = {
      "deg0": locate,
      "deg90": [0, 0, 0, 0, 0, 0, 0, 0],
      "deg180": [0, 0, 0, 0, 0, 0, 0, 0],
      "deg270": [0, 0, 0, 0, 0, 0, 0, 0]
    };
  }

  Tetrimino.prototype.move = function(deltaPointTop, deltaPointLeft) {
    var block, block_, j, k, l, len, len1, len2, len3, len4, m, n, ref, ref1, ref2, ref3, ref4;
    if (deltaPointTop !== 0) {
      ref = this.blocks;
      for (j = 0, len = ref.length; j < len; j++) {
        block = ref[j];
        if (block.judgeBottom() === false) {
          ref1 = this.blocks;
          for (k = 0, len1 = ref1.length; k < len1; k++) {
            block_ = ref1[k];
            block_.changeAttr();
          }
          return "falled!";
        }
      }
    }
    if (deltaPointLeft > 0) {
      ref2 = this.blocks;
      for (l = 0, len2 = ref2.length; l < len2; l++) {
        block = ref2[l];
        if (block.judgeRight() === false) {
          return false;
        }
      }
    }
    if (deltaPointLeft < 0) {
      ref3 = this.blocks;
      for (m = 0, len3 = ref3.length; m < len3; m++) {
        block = ref3[m];
        if (block.judgeLeft() === false) {
          return false;
        }
      }
    }
    this.point.top += deltaPointTop;
    this.point.left += deltaPointLeft;
    ref4 = this.blocks;
    for (n = 0, len4 = ref4.length; n < len4; n++) {
      block = ref4[n];
      block.move(deltaPointTop, deltaPointLeft);
    }
    return true;
  };

  Tetrimino.prototype.rotate = function(deg) {
    var block, i, j, k, len, len1, ref, ref1, results;
    ref = this.blocks;
    for (j = 0, len = ref.length; j < len; j++) {
      block = ref[j];
      console.log(["bottom: " + (block.judgeBottom()), "left: " + (block.judgeLeft()), "right: " + (block.judgeRight())]);
    }
    ref1 = this.blocks;
    results = [];
    for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
      block = ref1[i];
      results.push(block.moveAbsolute(this.point.top + this.deg["deg" + deg][i * 2], this.point.left + this.deg["deg" + deg][i * 2 + 1]));
    }
    return results;
  };

  return Tetrimino;

})();

TetriminoRed = (function(superClass) {
  extend(TetriminoRed, superClass);

  function TetriminoRed() {
    TetriminoRed.__super__.constructor.call(this, [0, 0, 30, 0, 30, 30, 30, 60], "red");
    this.deg["deg90"] = [0, 30, 0, 60, 30, 30, 60, 30];
    this.deg["deg180"] = [30, 0, 30, 30, 30, 60, 60, 60];
    this.deg["deg270"] = [0, 30, 30, 30, 60, 0, 60, 30];
  }

  return TetriminoRed;

})(Tetrimino);
